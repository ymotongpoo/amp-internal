<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AMP internal</title>
    <link>https://ymotongpoo.github.io/amp-internal/</link>
    <description>Recent content on AMP internal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>source code in the docuements are all from AMP team under Apache License 2.0. texts are under Apache License 2.0.</copyright>
    <lastBuildDate>Wed, 12 Oct 2016 16:02:37 +0900</lastBuildDate>
    <atom:link href="https://ymotongpoo.github.io/amp-internal/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Appendix A: runner.jar</title>
      <link>https://ymotongpoo.github.io/amp-internal/post/appendix_runner/</link>
      <pubDate>Wed, 12 Oct 2016 16:02:37 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/amp-internal/post/appendix_runner/</guid>
      <description>

&lt;h2 id=&#34;runner-jar:a738aa2a24b61468f18e896e4072e2f3&#34;&gt;runner.jar&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&#34;./gulp/&#34;&gt;chapter 1&lt;/a&gt;, we saw that option &lt;code&gt;entry_point&lt;/code&gt; is passed to &lt;code&gt;runner.jar&lt;/code&gt; and that is defining the entry point of &lt;code&gt;v0.js&lt;/code&gt;. But how can we know &lt;code&gt;runner.jar&lt;/code&gt; is Closure Compiler?&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;./runner&lt;/code&gt; directory, you find &lt;code&gt;build.xml&lt;/code&gt; which is Ant build file for &lt;code&gt;runner.jar&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;no&amp;quot;?&amp;gt;
&amp;lt;project default=&amp;quot;jar&amp;quot; basedir=&amp;quot;.&amp;quot; name=&amp;quot;runner&amp;quot;&amp;gt;
...
  &amp;lt;property name=&amp;quot;dir.buildfile&amp;quot; value=&amp;quot;.&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;src.dir&amp;quot; value=&amp;quot;${basedir}/src&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;test.dir&amp;quot; value=&amp;quot;${basedir}/test&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;build.dir&amp;quot; value=&amp;quot;${basedir}/build&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;lib.dir&amp;quot; value=&amp;quot;${basedir}/lib&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;dist.dir&amp;quot; value=&amp;quot;${basedir}/dist&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;runner-jarfile&amp;quot; value=&amp;quot;${build.dir}/${ant.project.name}.jar&amp;quot;/&amp;gt;
  &amp;lt;property name=&amp;quot;compiler.dir&amp;quot; value=&amp;quot;${basedir}/../../third_party/closure-compiler&amp;quot;/&amp;gt;

  &amp;lt;property name=&amp;quot;classes.dir&amp;quot; value=&amp;quot;${build.dir}/classes&amp;quot;/&amp;gt;
...
  &amp;lt;target name=&amp;quot;jar&amp;quot; depends=&amp;quot;compile&amp;quot;&amp;gt;
    &amp;lt;jar destfile=&amp;quot;${runner-jarfile}&amp;quot;&amp;gt;
      &amp;lt;zipfileset src=&amp;quot;${lib.dir}/jar-in-jar-loader.zip&amp;quot;/&amp;gt;
      &amp;lt;fileset dir=&amp;quot;${classes.dir}&amp;quot;/&amp;gt;
      &amp;lt;fileset dir=&amp;quot;${compiler.dir}&amp;quot;&amp;gt;
        &amp;lt;include name=&amp;quot;compiler.jar&amp;quot;/&amp;gt;
      &amp;lt;/fileset&amp;gt;
      &amp;lt;manifest&amp;gt;
        &amp;lt;attribute name=&amp;quot;Main-Class&amp;quot; value=&amp;quot;org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader&amp;quot;/&amp;gt;
        &amp;lt;attribute name=&amp;quot;Rsrc-Main-Class&amp;quot; value=&amp;quot;org.ampproject.AmpCommandLineRunner&amp;quot;/&amp;gt;
        &amp;lt;attribute name=&amp;quot;Class-Path&amp;quot; value=&amp;quot;.&amp;quot;/&amp;gt;
        &amp;lt;attribute name=&amp;quot;Rsrc-Class-Path&amp;quot; value=&amp;quot;./ compiler.jar&amp;quot;/&amp;gt;
      &amp;lt;/manifest&amp;gt;
    &amp;lt;/jar&amp;gt;
    &amp;lt;mkdir dir=&amp;quot;${dist.dir}&amp;quot;/&amp;gt;
    &amp;lt;copy file=&amp;quot;${build.dir}/runner.jar&amp;quot; todir=&amp;quot;${dist.dir}&amp;quot;/&amp;gt;
  &amp;lt;/target&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, you see that the executable jar file is based on &lt;code&gt;org.ampproject.AmpCommandLineRunner&lt;/code&gt; that is located in &lt;code&gt;./src/org/ampproject/AmpCommandLineRunner.java&lt;/code&gt;.
The &lt;a href=&#34;http://static.javadoc.io/com.google.javascript/closure-compiler/v20160911/com/google/javascript/jscomp/CommandLineRunner.html&#34;&gt;JavaDoc of it&lt;/a&gt; tells that the command line tool.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1. Generating AMP JS</title>
      <link>https://ymotongpoo.github.io/amp-internal/post/gulp/</link>
      <pubDate>Tue, 11 Oct 2016 16:14:23 +0900</pubDate>
      
      <guid>https://ymotongpoo.github.io/amp-internal/post/gulp/</guid>
      <description>

&lt;h2 id=&#34;preface:c34aea999ea1eeef6ae97c4fa3367837&#34;&gt;Preface&lt;/h2&gt;

&lt;p&gt;Before digging into the repository of AMP HTML, let&amp;rsquo;s see how AMP elements works in the browser at first hand.&lt;/p&gt;

&lt;p&gt;The specification of AMP HTML tag set is combination of subset of HTML5 and custom elements. All builtin custom elements and whole AMP runtime is implemented in AMP JS, which is hosted in the wild on &lt;code&gt;https://cdn.ampproject.org/v0.js&lt;/code&gt;.
Other third party extensional custom elements, such as &lt;code&gt;amp-analytics&lt;/code&gt;, &lt;code&gt;amp-ad&lt;/code&gt; and so on are handled in special JavaScript with the elements&amp;rsquo; names.&lt;/p&gt;

&lt;p&gt;The following snippets is from existing AMP page in the production.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script custom-element=&amp;quot;amp-font&amp;quot; src=&amp;quot;https://cdn.ampproject.org/v0/amp-font-0.1.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script custom-element=&amp;quot;amp-ad&amp;quot; src=&amp;quot;https://cdn.ampproject.org/v0/amp-ad-0.1.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script custom-element=&amp;quot;amp-analytics&amp;quot; src=&amp;quot;https://cdn.ampproject.org/v0/amp-analytics-0.1.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
...
&amp;lt;script src=&amp;quot;https://cdn.ampproject.org/v0.js&amp;quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All JavaScripts for AMP are hosted under &lt;code&gt;https://cdn.ampproject.org/&lt;/code&gt;. So it seems that we should take a look at where all those JavaScripts are located, or generated in the repository.&lt;/p&gt;

&lt;p&gt;You may find that there&amp;rsquo;s no file named &lt;code&gt;v0.js&lt;/code&gt; in the repository once you hit the &lt;code&gt;find&lt;/code&gt; command on the console. Also, you may find thet there&amp;rsquo;s no files with the name of &lt;code&gt;[CUSTOM ELEMENT NAME]-[VERSION].js&lt;/code&gt; neither, though you find directories under &lt;code&gt;extensions&lt;/code&gt; directory that look dedicated for each custom elements, such as &lt;code&gt;amp-ad&lt;/code&gt;, &lt;code&gt;amp-audio&lt;/code&gt; and so on.&lt;/p&gt;

&lt;p&gt;The reason of this is because there JavaScript files are generated by the process run by &lt;code&gt;gulp&lt;/code&gt;. So let&amp;rsquo;s take a look at &lt;code&gt;gulpfile.js&lt;/code&gt; and understand how these files are generated.&lt;/p&gt;

&lt;h2 id=&#34;compilejs:c34aea999ea1eeef6ae97c4fa3367837&#34;&gt;compileJs()&lt;/h2&gt;

&lt;p&gt;As soon as searching the string &lt;code&gt;&#39;v0.js&#39;&lt;/code&gt; in the &lt;code&gt;gulpfile.js&lt;/code&gt;, you&amp;rsquo;ll find the function &lt;code&gt;compile()&lt;/code&gt; that runs &lt;code&gt;compileJs()&lt;/code&gt; for a couple of times, &lt;code&gt;compileCss()&lt;/code&gt; and &lt;code&gt;thirdPartyBootstrap()&lt;/code&gt;. Since what we are interested in is &lt;code&gt;v0.js&lt;/code&gt;, &lt;code&gt;compileJs()&lt;/code&gt; would give some hints for the generation process of &lt;code&gt;v0.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**
 * Compile a javascript file
 *
 * @param {string} srcDir Path to the src directory
 * @param {string} srcFilename Name of the JS source file
 * @param {string} destDir Destination folder for output script
 * @param {?Object} options
 */
function compileJs(srcDir, srcFilename, destDir, options) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The function definition and comments with it describes well how it works. The function call in &lt;code&gt;compile()&lt;/code&gt; to generate &lt;code&gt;v0.js&lt;/code&gt; is following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  // For compilation with babel we start with the amp-babel entry point,
  // but then rename to the amp.js which we&#39;ve been using all along.
  compileJs(&#39;./src/&#39;, &#39;amp-babel.js&#39;, &#39;./dist&#39;, {
    toName: &#39;amp.js&#39;,
    minifiedName: &#39;v0.js&#39;,
    includePolyfills: true,
    checkTypes: opt_checkTypes,
    watch: watch,
    preventRemoveAndMakeDir: opt_preventRemoveAndMakeDir,
    minify: shouldMinify,
    // If there is a sync JS error during initial load,
    // at least try to unhide the body.
    wrapper: &#39;try{(function(){&amp;lt;%= contents %&amp;gt;})()}catch(e){&#39; +
        &#39;setTimeout(function(){&#39; +
        &#39;var s=document.body.style;&#39; +
        &#39;s.opacity=1;&#39; +
        &#39;s.visibility=&amp;quot;visible&amp;quot;;&#39; +
        &#39;s.animation=&amp;quot;none&amp;quot;;&#39; +
        &#39;s.WebkitAnimation=&amp;quot;none;&amp;quot;},1000);throw e};&#39;
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Though I&amp;rsquo;m not a babel expert, the function call sounds like creating &lt;code&gt;./dist/v0.js&lt;/code&gt; in some condition. With that expectation, let&amp;rsquo;s take a closer look in &lt;code&gt;compileJs()&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function compileJs(srcDir, srcFilename, destDir, options) {
  options = options || {};
  if (options.minify) {
    function minify() {
      console.log(&#39;Minifying &#39; + srcFilename);
      closureCompile(srcDir + srcFilename, destDir, options.minifiedName,
          options)
          .then(function() {
            appendToCompiledFile(srcFilename, destDir + &#39;/&#39; + options.minifiedName);
            fs.writeFileSync(destDir + &#39;/version.txt&#39;, internalRuntimeVersion);
            if (options.latestName) {
              fs.copySync(
                  destDir + &#39;/&#39; + options.minifiedName,
                  destDir + &#39;/&#39; + options.latestName);
            }
          });
    }
    minify();
    return;
  }
  ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;closurecompile:c34aea999ea1eeef6ae97c4fa3367837&#34;&gt;closureCompile()&lt;/h2&gt;

&lt;p&gt;Ok, great. In the internal function &lt;code&gt;minify()&lt;/code&gt;, we see the line &lt;code&gt;closureCompile(srcDir + srcFilename, destDir, options.minifiedName, options)&lt;/code&gt;. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c34aea999ea1eeef6ae97c4fa3367837:gulp1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c34aea999ea1eeef6ae97c4fa3367837:gulp1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;closureCompile()&lt;/code&gt; is imported from &lt;code&gt;build-system/tasks/compile.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Compiles AMP with the closure compiler. This is intended only for
// production use. During development we intent to continue using
// babel, as it has much faster incremental compilation.
exports.closureCompile = function(entryModuleFilename, outputDir,
    outputFilename, options) {
  // Rate limit closure compilation to MAX_PARALLEL_CLOSURE_INVOCATIONS
  // concurrent processes.
  return new Promise(function(resolve) {
    function start() {
      inProgress++;
      compile(entryModuleFilename, outputDir, outputFilename, options)
          .then(function() {
            inProgress--;
            next();
            resolve();
          }, function(e) {
            console./*OK*/error(&#39;Compilation error&#39;, e.message);
            process.exit(1);
          });
    }
    function next() {
      if (!queue.length) {
        return;
      }
      if (inProgress &amp;lt; MAX_PARALLEL_CLOSURE_INVOCATIONS) {
        queue.shift()();
      }
    }
    queue.push(start);
    next();
  });
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seems the internal function &lt;code&gt;start()&lt;/code&gt; inside Promise() is doing something, because it is pushed to the array variable &lt;code&gt;queue&lt;/code&gt; at the end of the Promise and called in the internal function &lt;code&gt;next()&lt;/code&gt; that is called at the very last of the Promise. (&lt;code&gt;queue.shift()()&lt;/code&gt; is.)&lt;/p&gt;

&lt;p&gt;The key function &lt;code&gt;compile()&lt;/code&gt; is sort of a large function. It begins with like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function compile(entryModuleFilenames, outputDir,
    outputFilename, options) {
  return new Promise(function(resolve, reject) {
    ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We see that this function returns &lt;code&gt;Promise&lt;/code&gt;. And most of the implementation is spared for variable definitions based on arguments. So the main part of the &lt;code&gt;compile()&lt;/code&gt; function is here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    var stream = gulp.src(srcs)
        .pipe(closureCompiler(compilerOptions))
        .on(&#39;error&#39;, function(err) {
          console./*OK*/error(&#39;Error compiling&#39;, entryModuleFilenames);
          console./*OK*/error(err.message);
          process.exit(1);
        });

    // If we&#39;re only doing type checking, no need to output the files.
    if (!argv.typecheck_only) {
      stream = stream
        .pipe(rename(outputFilename))
        .pipe(replace(/\$internalRuntimeVersion\$/g, internalRuntimeVersion))
        .pipe(replace(/\$internalRuntimeToken\$/g, internalRuntimeToken))
        .pipe(gulp.dest(outputDir))
        .on(&#39;end&#39;, function() {
          console./*OK*/log(&#39;Compiled&#39;, entryModuleFilename, &#39;to&#39;,
              outputDir + &#39;/&#39; + outputFilename, &#39;via&#39;, intermediateFilename);
          gulp.src(intermediateFilename + &#39;.map&#39;)
              .pipe(rename(outputFilename + &#39;.map&#39;))
              .pipe(gulp.dest(outputDir))
              .on(&#39;end&#39;, resolve);
        });
    }

    return stream;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you see that the stream is renamed with &lt;code&gt;.pipe(rename(outputFilename))&lt;/code&gt; and written into &lt;code&gt;.pipe(gulp.dest(outputDir))&lt;/code&gt;, where &lt;code&gt;outputFilename&lt;/code&gt; is &lt;code&gt;v0.js&lt;/code&gt; and &lt;code&gt;outputDir&lt;/code&gt; is &lt;code&gt;./dist&lt;/code&gt; respectively.&lt;/p&gt;

&lt;p&gt;So the summary of the process so far is:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;compileJs()&lt;/code&gt; calls &lt;code&gt;minify()&lt;/code&gt; (&lt;code&gt;options.minify&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; on produciton release.)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minify()&lt;/code&gt; calls &lt;code&gt;closureCompiler()&lt;/code&gt; and then save it as &lt;code&gt;./dist/v0.js&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we grasped the overview of the file generation process. But how is &lt;code&gt;v0.js&lt;/code&gt; starts it process? The hint is in the compiler options for Closure Compiler. The function &lt;code&gt;closureCompiler()&lt;/code&gt; is external function defined in the npm module &lt;code&gt;gulp-closure-compiler&lt;/code&gt; and how the object &lt;code&gt;compilerOptions&lt;/code&gt; is handled is described &lt;a href=&#34;https://github.com/steida/gulp-closure-compiler/blob/master/index.js&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = function(opt, execFile_opt) {
  ...
  // Can&#39;t use sindresorhus/dargs, compiler requires own syntax.
  var flagsToArgs = function(flags) {
    var args = [];
    for (var flag in flags || {}) {
      var values = flags[flag];
      if (!Array.isArray(values)) values = [values];
      values.forEach(function(value) {
        if (flag === &#39;externs&#39;) {
          glob.sync(value).forEach(function(resolved){
            args.push(buildFlag(flag, resolved))
          });
        } else {
          args.push(buildFlag(flag, value));
        }
      });
    }
    return args;
  };

  var buildFlag = function(flag, value){
    return &#39;--&#39; + flag + (value === null ? &#39;&#39; : &#39;=&#39; + value)
  };
  ...
  function() endStream() {
    ...
    args = args.concat(flagsToArgs(opt.compilerFlags));
    ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, all options in &lt;code&gt;opt.compilerFlags&lt;/code&gt; are expanded in the format of &lt;code&gt;--flag1=value1 --flag2=value2 ...&lt;/code&gt; and are passed to Closure Compiler. Then let&amp;rsquo;s get back to our &lt;code&gt;compile.js&lt;/code&gt; and see what kind of flags are passed to &lt;code&gt;closureCompiler()&lt;/code&gt; in the build process of &lt;code&gt;v0.js&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    var entryModuleFilename;
    if (entryModuleFilenames instanceof Array) {
      entryModuleFilename = entryModuleFilenames[0];
    } else {
      entryModuleFilename = entryModuleFilenames;
      entryModuleFilenames = [entryModuleFilename];
    }
    ...
    // Add needed path for extensions.
    // Instead of globbing all extensions, this will only add the actual
    // extension path for much quicker build times.
    entryModuleFilenames.forEach(function(filename) {
      if (filename.indexOf(&#39;extensions/&#39;) == -1) {
        return;
      }
      var path = filename.replace(/\/[^/]+\.js$/, &#39;/**/*.js&#39;);
      srcs.push(path);
    });
    ...
    var compilerOptions = {
      compilerPath: &#39;build-system/runner/dist/runner.jar&#39;,
      ...
      compilerFlags: {
        ...
        entry_point: entryModuleFilenames,
        ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, skipping the internals of &lt;code&gt;runner.jar&lt;/code&gt; because it is not essential here &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:c34aea999ea1eeef6ae97c4fa3367837:gulp2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:c34aea999ea1eeef6ae97c4fa3367837:gulp2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, but the option &lt;code&gt;entry_point&lt;/code&gt; is providing the entry point of &lt;code&gt;v0.js&lt;/code&gt;, and the value is &lt;code&gt;entryModuleFilename&lt;/code&gt;, which is in this case &lt;code&gt;./src/amp-babel.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now finally we got the point. So our AMP JS file &lt;code&gt;v0.js&lt;/code&gt; is concatted and minified from lots of JavaScript files and its entry point is &lt;code&gt;./src/amp-babel.js&lt;/code&gt;. In &lt;a href=&#34;./amp/&#34;&gt;next chapter&lt;/a&gt;, we dig into the file.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:c34aea999ea1eeef6ae97c4fa3367837:gulp1&#34;&gt;&lt;code&gt;appendToCompileFile()&lt;/code&gt; is called only in the case of the &lt;code&gt;srcFilename&lt;/code&gt; is &lt;code&gt;&amp;quot;amp-viz-vega.js&amp;quot;&lt;/code&gt; so ignore it in this case.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c34aea999ea1eeef6ae97c4fa3367837:gulp1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:c34aea999ea1eeef6ae97c4fa3367837:gulp2&#34;&gt;Added appendix for the build process of &lt;code&gt;runner.jar&lt;/code&gt;. See &lt;a href=&#34;./appendix_runner/&#34;&gt;Appendix&lt;/a&gt; for details.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:c34aea999ea1eeef6ae97c4fa3367837:gulp2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>